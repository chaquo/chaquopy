plugins {
    id 'com.android.application'
    id 'com.chaquo.python'
}

def PACKAGE_GROUPS = [
    // Group 0 is not included in regular pre-release testing.
    [
        // Not in the public package repository.
        "cmake-example", "cython-example", "python-example", "rpi-gpio",

        // Conflicts with opencv-python and opencv-contrib-python.
        "opencv-contrib-python-headless", "opencv-python-headless",
    ],
    [
        // Conflicts with more popular packages
        "opencv-contrib-python",  // opencv-python
        "pycrypto",  // pycryptodome

        // Test tensorflow and related packages separately to avoid suspected address space
        // fragmentation problems on some 32-bit devices (#5719).
        "grpcio", "h5py", "tensorflow", "tflite-runtime",
    ],
]

def defaultGroup = []  // Contains every package which isn't listed above.
ext.PACKAGES_DIR = "../../packages"
for (f in file(ext.PACKAGES_DIR).listFiles()) {
    if (f.isDirectory() &&
        ! f.name.startsWith("chaquopy-") &&
        ! PACKAGE_GROUPS.any { f.name in it }) {
        defaultGroup.add(f.name)
    }
}
PACKAGE_GROUPS.add(defaultGroup)

// Extra dependencies required to run the tests. Each entry is a pip requirement specifier.
def SPACY_MODEL = "en_core_web_sm-2.2.5"
ext.TEST_PACKAGES = [
    "backports-zoneinfo": ["tzdata"],
    "dlib": ["numpy"],
    "grpcio": ["protobuf"],
    "photutils": ["scipy"],
    "pycurl": ["certifi"],
    "pyzbar": ["pillow"],
    "qutip": ["setuptools"],
    "ruamel-yaml-clib": ["ruamel-yaml"],
    "shapely": ["numpy"],
    "spacy": ["https://github.com/explosion/spacy-models/releases/download/$SPACY_MODEL/${SPACY_MODEL}.tar.gz"],
    "soundfile": ["numpy"],
]


android {
    namespace "com.chaquo.python.pkgtest3"
    compileSdkVersion 33

    defaultConfig {
        applicationId "com.chaquo.python.pkgtest3"
        minSdkVersion 21
        targetSdkVersion 33

        versionName rootProject.version
        def verParsed = rootProject.version.split(/\./).collect { Integer.parseInt(it) }
        versionCode ((verParsed[0] * 1000000) + (verParsed[1] * 1000) + (verParsed[2] * 10))

        addPackages(delegate, [])
        python {
            version "3.8"

            pip {
                // After a package is tested, remember to move it to the public repository!
                options "--extra-index-url", "https://chaquo.com/pypi-test/"
            }
            pyc {
                src false  // Include test source code in stack traces.
            }
            extractPackages "astropy"
        }

        ndk {
            abiFilters "arm64-v8a", "armeabi-v7a", "x86", "x86_64"
         }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        def utilsSrc = "../../../../demo/app/src/utils"
        main {
            java { srcDir "$utilsSrc/java" }
            python { srcDir "$utilsSrc/python" }
            res { srcDir "$utilsSrc/res" }
        }
    }
}


def addPackages(flavor, List<String> packages) {
    def outputDir = "src/$flavor.name/python/chaquopy/test"
    delete(outputDir)
    mkdir(outputDir)
    String suiteSrc = ""
    for (req in packages) {
        def pkgName = req.split("==")[0]
        def pkgDir = file("${ext.PACKAGES_DIR}/$pkgName")
        def testPaths = ["test.py", "test"]
            .collect { file("$pkgDir/$it") }
            .findAll { it.exists() }
        if (testPaths.size() != 1) {
            throw new GradleException("Found ${testPaths.size()} test files in $pkgDir")
        }

        def testPath = testPaths[0]
        flavor.python.pip {
            install req
            TEST_PACKAGES.getOrDefault(pkgName, []).each { install it }
        }
        def pkgModule = pkgName.replace('-', '_')
        copy {
            from testPath.parentFile
            include "${testPath.name}/**"
            into outputDir
        }
        file("$outputDir/$testPath.name").renameTo(
            file("$outputDir/${testPath.name.replace('test', pkgModule)}"))
        suiteSrc += "from .${pkgModule} import *\n"
    }
    file("$outputDir/__init__.py").text = suiteSrc
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    // appcompat version 1.2.0 is required to fix an incompatibility with WebView on API level
    // 21 (https://stackoverflow.com/questions/41025200).
    implementation 'androidx.appcompat:appcompat:1.2.0-beta01'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.1.0'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'junit:junit:4.12'
    testImplementation 'junit:junit:4.12'
}
