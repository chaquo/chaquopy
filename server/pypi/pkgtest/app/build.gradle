plugins {
    id 'com.android.application'
    id 'com.chaquo.python'
}

ext.PACKAGES_DIR = "../../packages"

def SPACY_MODEL = "en_core_web_sm-2.2.5"

// Tensorflow 2.1.0 is incompatible with protobuf 4.25
// (https://stackoverflow.com/q/77569103)
def PROTOBUF_REQ = "protobuf<4.25"

// Extra dependencies required to run the tests. Each entry is a pip requirement specifier.
ext.TEST_PACKAGES = [
    "argon2-cffi-bindings": ["argon2-cffi"],
    "backports-zoneinfo": ["tzdata"],
    "dlib": ["numpy"],
    "grpcio": [PROTOBUF_REQ],
    "photutils": ["scipy"],
    "pycurl": ["certifi"],
    "pyzbar": ["pillow"],
    "qutip": ["setuptools"],
    "ruamel-yaml-clib": ["ruamel-yaml"],
    "shapely": ["numpy"],
    "spacy": ["https://github.com/explosion/spacy-models/releases/download/$SPACY_MODEL/${SPACY_MODEL}.tar.gz"],
    "soundfile": ["numpy"],
    "tensorflow": [PROTOBUF_REQ]
]


android {
    namespace "com.chaquo.python.pkgtest3"
    compileSdk = 35

    defaultConfig {
        applicationId "com.chaquo.python.pkgtest3"
        minSdk = 24
        targetSdk = 35

        String pluginVersion = null
        for (art in rootProject.buildscript.configurations.getByName("classpath")
             .resolvedConfiguration.resolvedArtifacts) {
            def dep = art.moduleVersion.id
            if (dep.group == "com.chaquo.python" && dep.name == "gradle") {
                pluginVersion = dep.version
            }
        }
        if (pluginVersion == null) {
            throw new GradleException("Couldn't find Chaquopy plugin")
        }

        versionName pluginVersion
        def verParsed = versionName.split(/\./).collect { Integer.parseInt(it) }
        versionCode ((verParsed[0] * 1000000) + (verParsed[1] * 1000) + (verParsed[2] * 10))

        // To test packages, edit the following line to list their names, separated by
        // spaces. Each name must be a subdirectory of PACKAGES_DIR.
        def PACKAGES = "jiter"
        addPackages(delegate, PACKAGES.trim().split(/\s+/).toList())

        python {
            version "3.11"

            pip {
                // After a package is tested, remember to move it to the public repository!
                options "--extra-index-url", "file:///Work/Inno/sandbox/pr/chaquopy/server/pypi/dist/"
            }
            pyc {
                src false  // Include test source code in stack traces.
            }
            extractPackages "astropy"
        }

        ndk {
            abiFilters "x86_64"
         }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        def utilsSrc = "../../../../demo/app/src/utils"
        main {
            java { srcDir "$utilsSrc/java" }
            python { srcDir "$utilsSrc/python" }
            res { srcDir "$utilsSrc/res" }
        }
    }
}


def addPackages(flavor, List<String> packages) {
    def outputDir = "src/$flavor.name/python/chaquopy/test"
    delete(outputDir)
    mkdir(outputDir)
    String suiteSrc = ""
    for (req in packages) {
        // Splitting an empty string returns a list containing one empty string.
        if (req.isEmpty()) {
            continue
        }
        def pkgName = req.split("==")[0]
        def pkgDir = file("${ext.PACKAGES_DIR}/$pkgName")
        def testPaths = ["test.py", "test"]
            .collect { file("$pkgDir/$it") }
            .findAll { it.exists() }
        if (testPaths.size() != 1) {
            throw new GradleException("Found ${testPaths.size()} test files in $pkgDir")
        }

        def testPath = testPaths[0]
        flavor.python.pip {
            install req
            TEST_PACKAGES.getOrDefault(pkgName, []).each { install it }
        }
        def pkgModule = pkgName.replace('-', '_')
        copy {
            from testPath.parentFile
            include "${testPath.name}/**"
            into outputDir
        }
        file("$outputDir/$testPath.name").renameTo(
            file("$outputDir/${testPath.name.replace('test', pkgModule)}"))
        suiteSrc += "from .${pkgModule} import *\n"
    }
    file("$outputDir/__init__.py").text = suiteSrc
}


dependencies {
    // appcompat version 1.2.0 is required to fix an incompatibility with WebView on API level
    // 21 (https://stackoverflow.com/questions/41025200).
    implementation 'androidx.appcompat:appcompat:1.2.0-beta01'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.1.0'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'junit:junit:4.12'
}
